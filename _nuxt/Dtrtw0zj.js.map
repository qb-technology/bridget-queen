{"version":3,"file":"Dtrtw0zj.js","sources":["../../../../../../.pnpm/embla-carousel-autoplay@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js"],"sourcesContent":["const defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\n\nfunction normalizeDelay(emblaApi, delay) {\n  const scrollSnaps = emblaApi.scrollSnapList();\n  if (typeof delay === 'number') {\n    return scrollSnaps.map(() => delay);\n  }\n  return delay(scrollSnaps, emblaApi);\n}\nfunction getAutoplayRootNode(emblaApi, rootNode) {\n  const emblaRootNode = emblaApi.rootNode();\n  return rootNode && rootNode(emblaRootNode) || emblaRootNode;\n}\n\nfunction Autoplay(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let destroyed;\n  let delay;\n  let timerStartTime = null;\n  let timerId = 0;\n  let autoplayActive = false;\n  let mouseIsOver = false;\n  let playOnDocumentVisible = false;\n  let jump = false;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    if (emblaApi.scrollSnapList().length <= 1) return;\n    jump = options.jump;\n    destroyed = false;\n    delay = normalizeDelay(emblaApi, options.delay);\n    const {\n      eventStore,\n      ownerDocument\n    } = emblaApi.internalEngine();\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag;\n    const root = getAutoplayRootNode(emblaApi, options.rootNode);\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange);\n    if (isDraggable) {\n      emblaApi.on('pointerDown', pointerDown);\n    }\n    if (isDraggable && !options.stopOnInteraction) {\n      emblaApi.on('pointerUp', pointerUp);\n    }\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', mouseEnter);\n    }\n    if (options.stopOnMouseEnter && !options.stopOnInteraction) {\n      eventStore.add(root, 'mouseleave', mouseLeave);\n    }\n    if (options.stopOnFocusIn) {\n      emblaApi.on('slideFocusStart', stopAutoplay);\n    }\n    if (options.stopOnFocusIn && !options.stopOnInteraction) {\n      eventStore.add(emblaApi.containerNode(), 'focusout', startAutoplay);\n    }\n    if (options.playOnInit) startAutoplay();\n  }\n  function destroy() {\n    emblaApi.off('pointerDown', pointerDown).off('pointerUp', pointerUp).off('slideFocusStart', stopAutoplay);\n    stopAutoplay();\n    destroyed = true;\n    autoplayActive = false;\n  }\n  function setTimer() {\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearTimeout(timerId);\n    timerId = ownerWindow.setTimeout(next, delay[emblaApi.selectedScrollSnap()]);\n    timerStartTime = new Date().getTime();\n    emblaApi.emit('autoplay:timerset');\n  }\n  function clearTimer() {\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearTimeout(timerId);\n    timerId = 0;\n    timerStartTime = null;\n    emblaApi.emit('autoplay:timerstopped');\n  }\n  function startAutoplay() {\n    if (destroyed) return;\n    if (documentIsHidden()) {\n      playOnDocumentVisible = true;\n      return;\n    }\n    if (!autoplayActive) emblaApi.emit('autoplay:play');\n    setTimer();\n    autoplayActive = true;\n  }\n  function stopAutoplay() {\n    if (destroyed) return;\n    if (autoplayActive) emblaApi.emit('autoplay:stop');\n    clearTimer();\n    autoplayActive = false;\n  }\n  function visibilityChange() {\n    if (documentIsHidden()) {\n      playOnDocumentVisible = autoplayActive;\n      return stopAutoplay();\n    }\n    if (playOnDocumentVisible) startAutoplay();\n  }\n  function documentIsHidden() {\n    const {\n      ownerDocument\n    } = emblaApi.internalEngine();\n    return ownerDocument.visibilityState === 'hidden';\n  }\n  function pointerDown() {\n    if (!mouseIsOver) stopAutoplay();\n  }\n  function pointerUp() {\n    if (!mouseIsOver) startAutoplay();\n  }\n  function mouseEnter() {\n    mouseIsOver = true;\n    stopAutoplay();\n  }\n  function mouseLeave() {\n    mouseIsOver = false;\n    startAutoplay();\n  }\n  function play(jumpOverride) {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    startAutoplay();\n  }\n  function stop() {\n    if (autoplayActive) stopAutoplay();\n  }\n  function reset() {\n    if (autoplayActive) startAutoplay();\n  }\n  function isPlaying() {\n    return autoplayActive;\n  }\n  function next() {\n    const {\n      index\n    } = emblaApi.internalEngine();\n    const nextIndex = index.clone().add(1).get();\n    const lastIndex = emblaApi.scrollSnapList().length - 1;\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex;\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump);\n    } else {\n      emblaApi.scrollTo(0, jump);\n    }\n    emblaApi.emit('autoplay:select');\n    if (kill) return stopAutoplay();\n    startAutoplay();\n  }\n  function timeUntilNext() {\n    if (!timerStartTime) return null;\n    const currentDelay = delay[emblaApi.selectedScrollSnap()];\n    const timePastSinceStart = new Date().getTime() - timerStartTime;\n    return currentDelay - timePastSinceStart;\n  }\n  const self = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying,\n    timeUntilNext\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\n\nexport { Autoplay as default };\n//# sourceMappingURL=embla-carousel-autoplay.esm.js.map\n"],"names":["defaultOptions","normalizeDelay","emblaApi","delay","scrollSnaps","getAutoplayRootNode","rootNode","emblaRootNode","Autoplay","userOptions","options","destroyed","timerStartTime","timerId","autoplayActive","mouseIsOver","playOnDocumentVisible","jump","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","allOptions","eventStore","ownerDocument","isDraggable","root","visibilityChange","pointerDown","pointerUp","mouseEnter","mouseLeave","stopAutoplay","startAutoplay","destroy","setTimer","ownerWindow","next","clearTimer","documentIsHidden","play","jumpOverride","stop","reset","isPlaying","index","nextIndex","lastIndex","kill","timeUntilNext","currentDelay","timePastSinceStart"],"mappings":"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","x_google_ignoreList":[0]}