{"version":3,"file":"wrqBHFeW.js","sources":["../../../../../../.pnpm/embla-carousel-fade@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-fade/esm/embla-carousel-fade.esm.js"],"sourcesContent":["function clampNumber(number, min, max) {\n  return Math.min(Math.max(number, min), max);\n}\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nfunction Fade(userOptions = {}) {\n  const fullOpacity = 1;\n  const noOpacity = 0;\n  const fadeFriction = 0.68;\n  let emblaApi;\n  let opacities = [];\n  let fadeToNextDistance;\n  let distanceFromPointerDown = 0;\n  let fadeVelocity = 0;\n  let progress = 0;\n  let shouldFadePair = false;\n  let defaultSettledBehaviour;\n  let defaultProgressBehaviour;\n  function init(emblaApiInstance) {\n    emblaApi = emblaApiInstance;\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    const {\n      scrollBody,\n      containerRect,\n      axis\n    } = emblaApi.internalEngine();\n    const containerSize = axis.measureSize(containerRect);\n    fadeToNextDistance = clampNumber(containerSize * 0.75, 200, 500);\n    shouldFadePair = false;\n    opacities = emblaApi.scrollSnapList().map((_, index) => index === selectedSnap ? fullOpacity : noOpacity);\n    defaultSettledBehaviour = scrollBody.settled;\n    defaultProgressBehaviour = emblaApi.scrollProgress;\n    scrollBody.settled = settled;\n    emblaApi.scrollProgress = scrollProgress;\n    emblaApi.on('select', select).on('slideFocus', fadeToSelectedSnapInstantly).on('pointerDown', pointerDown).on('pointerUp', pointerUp);\n    disableScroll();\n    fadeToSelectedSnapInstantly();\n  }\n  function destroy() {\n    const {\n      scrollBody\n    } = emblaApi.internalEngine();\n    scrollBody.settled = defaultSettledBehaviour;\n    emblaApi.scrollProgress = defaultProgressBehaviour;\n    emblaApi.off('select', select).off('slideFocus', fadeToSelectedSnapInstantly).off('pointerDown', pointerDown).off('pointerUp', pointerUp);\n    emblaApi.slideNodes().forEach(slideNode => {\n      const slideStyle = slideNode.style;\n      slideStyle.opacity = '';\n      slideStyle.transform = '';\n      slideStyle.pointerEvents = '';\n      if (!slideNode.getAttribute('style')) slideNode.removeAttribute('style');\n    });\n  }\n  function fadeToSelectedSnapInstantly() {\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    setOpacities(selectedSnap, fullOpacity);\n  }\n  function pointerUp() {\n    shouldFadePair = false;\n  }\n  function pointerDown() {\n    shouldFadePair = false;\n    distanceFromPointerDown = 0;\n    fadeVelocity = 0;\n  }\n  function select() {\n    const duration = emblaApi.internalEngine().scrollBody.duration();\n    fadeVelocity = duration ? 0 : fullOpacity;\n    shouldFadePair = true;\n    if (!duration) fadeToSelectedSnapInstantly();\n  }\n  function getSlideTransform(position) {\n    const {\n      axis\n    } = emblaApi.internalEngine();\n    const translateAxis = axis.scroll.toUpperCase();\n    return `translate${translateAxis}(${axis.direction(position)}px)`;\n  }\n  function disableScroll() {\n    const {\n      translate,\n      slideLooper\n    } = emblaApi.internalEngine();\n    translate.clear();\n    translate.toggleActive(false);\n    slideLooper.loopPoints.forEach(({\n      translate\n    }) => {\n      translate.clear();\n      translate.toggleActive(false);\n    });\n  }\n  function lockExcessiveScroll(fadeIndex) {\n    const {\n      scrollSnaps,\n      location,\n      target\n    } = emblaApi.internalEngine();\n    if (!isNumber(fadeIndex) || opacities[fadeIndex] < 0.5) return;\n    location.set(scrollSnaps[fadeIndex]);\n    target.set(location);\n  }\n  function setOpacities(fadeIndex, velocity) {\n    const scrollSnaps = emblaApi.scrollSnapList();\n    scrollSnaps.forEach((_, indexA) => {\n      const absVelocity = Math.abs(velocity);\n      const currentOpacity = opacities[indexA];\n      const isFadeIndex = indexA === fadeIndex;\n      const nextOpacity = isFadeIndex ? currentOpacity + absVelocity : currentOpacity - absVelocity;\n      const clampedOpacity = clampNumber(nextOpacity, noOpacity, fullOpacity);\n      opacities[indexA] = clampedOpacity;\n      const fadePair = isFadeIndex && shouldFadePair;\n      const indexB = emblaApi.previousScrollSnap();\n      if (fadePair) opacities[indexB] = 1 - clampedOpacity;\n      if (isFadeIndex) setProgress(fadeIndex, clampedOpacity);\n      setOpacity(indexA);\n    });\n  }\n  function setOpacity(index) {\n    const slidesInSnap = emblaApi.internalEngine().slideRegistry[index];\n    const {\n      scrollSnaps,\n      containerRect\n    } = emblaApi.internalEngine();\n    const opacity = opacities[index];\n    slidesInSnap.forEach(slideIndex => {\n      const slideStyle = emblaApi.slideNodes()[slideIndex].style;\n      const roundedOpacity = parseFloat(opacity.toFixed(2));\n      const hasOpacity = roundedOpacity > noOpacity;\n      const position = hasOpacity ? scrollSnaps[index] : containerRect.width + 2;\n      const transform = getSlideTransform(position);\n      if (hasOpacity) slideStyle.transform = transform;\n      slideStyle.opacity = roundedOpacity.toString();\n      slideStyle.pointerEvents = opacity > 0.5 ? 'auto' : 'none';\n      if (!hasOpacity) slideStyle.transform = transform;\n    });\n  }\n  function setProgress(fadeIndex, opacity) {\n    const {\n      index,\n      dragHandler,\n      scrollSnaps\n    } = emblaApi.internalEngine();\n    const pointerDown = dragHandler.pointerDown();\n    const snapFraction = 1 / (scrollSnaps.length - 1);\n    let indexA = fadeIndex;\n    let indexB = pointerDown ? emblaApi.selectedScrollSnap() : emblaApi.previousScrollSnap();\n    if (pointerDown && indexA === indexB) {\n      const reverseSign = Math.sign(distanceFromPointerDown) * -1;\n      indexA = indexB;\n      indexB = index.clone().set(indexB).add(reverseSign).get();\n    }\n    const currentPosition = indexB * snapFraction;\n    const diffPosition = (indexA - indexB) * snapFraction;\n    progress = currentPosition + diffPosition * opacity;\n  }\n  function getFadeIndex() {\n    const {\n      dragHandler,\n      index,\n      scrollBody\n    } = emblaApi.internalEngine();\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    if (!dragHandler.pointerDown()) return selectedSnap;\n    const directionSign = Math.sign(scrollBody.velocity());\n    const distanceSign = Math.sign(distanceFromPointerDown);\n    const nextSnap = index.clone().set(selectedSnap).add(directionSign * -1).get();\n    if (!directionSign || !distanceSign) return null;\n    return distanceSign === directionSign ? nextSnap : selectedSnap;\n  }\n  function fade(emblaApi) {\n    const {\n      dragHandler,\n      scrollBody\n    } = emblaApi.internalEngine();\n    const pointerDown = dragHandler.pointerDown();\n    const velocity = scrollBody.velocity();\n    const duration = scrollBody.duration();\n    const fadeIndex = getFadeIndex();\n    const noFadeIndex = !isNumber(fadeIndex);\n    if (pointerDown) {\n      if (!velocity) return;\n      distanceFromPointerDown += velocity;\n      fadeVelocity = Math.abs(velocity / fadeToNextDistance);\n      lockExcessiveScroll(fadeIndex);\n    }\n    if (!pointerDown) {\n      if (!duration || noFadeIndex) return;\n      fadeVelocity += (fullOpacity - opacities[fadeIndex]) / duration;\n      fadeVelocity *= fadeFriction;\n    }\n    if (noFadeIndex) return;\n    setOpacities(fadeIndex, fadeVelocity);\n  }\n  function settled() {\n    const {\n      target,\n      location\n    } = emblaApi.internalEngine();\n    const diffToTarget = target.get() - location.get();\n    const notReachedTarget = Math.abs(diffToTarget) >= 1;\n    const fadeIndex = getFadeIndex();\n    const noFadeIndex = !isNumber(fadeIndex);\n    fade(emblaApi);\n    if (noFadeIndex || notReachedTarget) return false;\n    return opacities[fadeIndex] > 0.999;\n  }\n  function scrollProgress() {\n    return progress;\n  }\n  const self = {\n    name: 'fade',\n    options: userOptions,\n    init,\n    destroy\n  };\n  return self;\n}\nFade.globalOptions = undefined;\n\nexport { Fade as default };\n//# sourceMappingURL=embla-carousel-fade.esm.js.map\n"],"names":["clampNumber","number","min","max","isNumber","value","Fade","userOptions","emblaApi","opacities","fadeToNextDistance","distanceFromPointerDown","fadeVelocity","progress","shouldFadePair","defaultSettledBehaviour","defaultProgressBehaviour","init","emblaApiInstance","selectedSnap","scrollBody","containerRect","axis","containerSize","_","index","settled","scrollProgress","select","fadeToSelectedSnapInstantly","pointerDown","pointerUp","disableScroll","destroy","slideNode","slideStyle","setOpacities","duration","getSlideTransform","position","translate","slideLooper","lockExcessiveScroll","fadeIndex","scrollSnaps","location","target","velocity","indexA","absVelocity","currentOpacity","isFadeIndex","nextOpacity","clampedOpacity","fadePair","indexB","setProgress","setOpacity","slidesInSnap","opacity","slideIndex","roundedOpacity","hasOpacity","transform","dragHandler","snapFraction","reverseSign","currentPosition","diffPosition","getFadeIndex","directionSign","distanceSign","nextSnap","fade","noFadeIndex","diffToTarget","notReachedTarget"],"mappings":"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","x_google_ignoreList":[0]}