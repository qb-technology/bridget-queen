{"version":3,"mappings":"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","names":["decompressSQLDump","base64Str","compressionType","binaryData","c","decompressedStream","text","refineContentFields","sql","doc","fields","findCollectionFields","item","key","table","contentManifest","getCollectionName","db","loadedCollections","dbPromises","loadDatabaseAdapter","collection","loadAdapter","collection2","initializeDatabase","loadCollectionDatabase","params","row","sqlite3InitModule","m","args","sqlite3","compressedDump","checksumId","dumpId","checksumState","tables","checksums","fetchDatabase","error","dump","command"],"ignoreList":[0,1,2],"sources":["../../../../../../.pnpm/@nuxt+content@3.6.3_better-sqlite3@12.2.0_magicast@0.3.5_vue-component-type-helpers@2.2.12/node_modules/@nuxt/content/dist/runtime/internal/dump.js","../../../../../../.pnpm/@nuxt+content@3.6.3_better-sqlite3@12.2.0_magicast@0.3.5_vue-component-type-helpers@2.2.12/node_modules/@nuxt/content/dist/runtime/internal/collection.js","../../../../../../.pnpm/@nuxt+content@3.6.3_better-sqlite3@12.2.0_magicast@0.3.5_vue-component-type-helpers@2.2.12/node_modules/@nuxt/content/dist/runtime/internal/database.client.js"],"sourcesContent":["export async function decompressSQLDump(base64Str, compressionType = \"gzip\") {\n  const binaryData = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n  const response = new Response(new Blob([binaryData]));\n  const decompressedStream = response.body?.pipeThrough(new DecompressionStream(compressionType));\n  const text = await new Response(decompressedStream).text();\n  return JSON.parse(text);\n}\n","import contentManifest from \"#content/manifest\";\nexport function refineContentFields(sql, doc) {\n  const fields = findCollectionFields(sql);\n  const item = { ...doc };\n  for (const key in item) {\n    if (fields[key] === \"json\" && item[key] && item[key] !== \"undefined\") {\n      item[key] = JSON.parse(item[key]);\n    }\n    if (fields[key] === \"boolean\" && item[key] !== \"undefined\") {\n      item[key] = Boolean(item[key]);\n    }\n  }\n  for (const key in item) {\n    if (item[key] === \"NULL\") {\n      item[key] = void 0;\n    }\n  }\n  return item;\n}\nfunction findCollectionFields(sql) {\n  const table = sql.match(/FROM\\s+(\\w+)/);\n  if (!table) {\n    return {};\n  }\n  const info = contentManifest[getCollectionName(table[1])];\n  return info?.fields || {};\n}\nfunction getCollectionName(table) {\n  return table.replace(/^_content_/, \"\");\n}\n","import { decompressSQLDump } from \"./dump.js\";\nimport { refineContentFields } from \"./collection.js\";\nimport { fetchDatabase } from \"./api.js\";\nimport { checksums, tables } from \"#content/manifest\";\nlet db;\nconst loadedCollections = {};\nconst dbPromises = {};\nexport function loadDatabaseAdapter(collection) {\n  async function loadAdapter(collection2) {\n    if (!db) {\n      dbPromises._ = dbPromises._ || initializeDatabase();\n      db = await dbPromises._;\n      Reflect.deleteProperty(dbPromises, \"_\");\n    }\n    if (!loadedCollections[String(collection2)]) {\n      dbPromises[String(collection2)] = dbPromises[String(collection2)] || loadCollectionDatabase(collection2);\n      await dbPromises[String(collection2)];\n      loadedCollections[String(collection2)] = \"loaded\";\n      Reflect.deleteProperty(dbPromises, String(collection2));\n    }\n    return db;\n  }\n  return {\n    all: async (sql, params) => {\n      await loadAdapter(collection);\n      return db.exec({ sql, bind: params, rowMode: \"object\", returnValue: \"resultRows\" }).map((row) => refineContentFields(sql, row));\n    },\n    first: async (sql, params) => {\n      await loadAdapter(collection);\n      return refineContentFields(\n        sql,\n        db.exec({ sql, bind: params, rowMode: \"object\", returnValue: \"resultRows\" }).shift()\n      );\n    },\n    exec: async (sql, params) => {\n      await loadAdapter(collection);\n      await db.exec({ sql, bind: params });\n    }\n  };\n}\nasync function initializeDatabase() {\n  if (!db) {\n    const sqlite3InitModule = await import(\"@sqlite.org/sqlite-wasm\").then((m) => m.default);\n    globalThis.sqlite3ApiConfig = {\n      // overriding default log function allows to avoid error when logger are dropped in build.\n      // For example `nuxt-security` module drops logger in production build by default.\n      silent: true,\n      debug: (...args) => console.debug(...args),\n      warn: (...args) => {\n        if (String(args[0]).includes(\"OPFS sqlite3_vfs\")) {\n          return;\n        }\n        console.warn(...args);\n      },\n      error: (...args) => console.error(...args),\n      log: (...args) => console.log(...args)\n    };\n    const sqlite3 = await sqlite3InitModule();\n    db = new sqlite3.oo1.DB();\n  }\n  return db;\n}\nasync function loadCollectionDatabase(collection) {\n  if (window.sessionStorage.getItem(\"previewToken\")) {\n    return db;\n  }\n  let compressedDump = null;\n  const checksumId = `checksum_${collection}`;\n  const dumpId = `collection_${collection}`;\n  let checksumState = \"matched\";\n  try {\n    const dbChecksum = db.exec({ sql: `SELECT * FROM ${tables.info} where id = '${checksumId}'`, rowMode: \"object\", returnValue: \"resultRows\" }).shift();\n    if (dbChecksum?.version !== checksums[String(collection)]) {\n      checksumState = \"mismatch\";\n    }\n  } catch {\n    checksumState = \"missing\";\n  }\n  if (checksumState !== \"matched\") {\n    if (!import.meta.dev) {\n      const localCacheVersion = window.localStorage.getItem(`content_${checksumId}`);\n      if (localCacheVersion === checksums[String(collection)]) {\n        compressedDump = window.localStorage.getItem(`content_${dumpId}`);\n      }\n    }\n    if (!compressedDump) {\n      compressedDump = await fetchDatabase(void 0, String(collection));\n      if (!import.meta.dev) {\n        try {\n          window.localStorage.setItem(`content_${checksumId}`, checksums[String(collection)]);\n          window.localStorage.setItem(`content_${dumpId}`, compressedDump);\n        } catch (error) {\n          console.error(\"Database integrity check failed, rebuilding database\", error);\n        }\n      }\n    }\n    const dump = await decompressSQLDump(compressedDump);\n    await db.exec({ sql: `DROP TABLE IF EXISTS ${tables[String(collection)]}` });\n    if (checksumState === \"mismatch\") {\n      await db.exec({ sql: `DELETE FROM ${tables.info} WHERE id = '${checksumId}'` });\n    }\n    for (const command of dump) {\n      try {\n        await db.exec(command);\n      } catch (error) {\n        console.error(\"Error executing command\", error);\n      }\n    }\n  }\n  return db;\n}\n"],"file":"_nuxt/CJkhiuL-.js"}