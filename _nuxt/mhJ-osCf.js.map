{"version":3,"file":"mhJ-osCf.js","sources":["../../../../../../.pnpm/embla-carousel-class-names@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-class-names/esm/embla-carousel-class-names.esm.js"],"sourcesContent":["const defaultOptions = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n  loop: 'is-loop'\n};\n\nfunction normalizeClassNames(classNames) {\n  const normalized = Array.isArray(classNames) ? classNames : [classNames];\n  return normalized.filter(Boolean);\n}\nfunction removeClass(node, classNames) {\n  if (!node || !classNames.length) return;\n  node.classList.remove(...classNames);\n}\nfunction addClass(node, classNames) {\n  if (!node || !classNames.length) return;\n  node.classList.add(...classNames);\n}\n\nfunction ClassNames(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let root;\n  let slides;\n  let snappedIndexes = [];\n  let inViewIndexes = [];\n  const selectedEvents = ['select'];\n  const draggingEvents = ['pointerDown', 'pointerUp'];\n  const inViewEvents = ['slidesInView'];\n  const classNames = {\n    snapped: [],\n    inView: [],\n    draggable: [],\n    dragging: [],\n    loop: []\n  };\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    root = emblaApi.rootNode();\n    slides = emblaApi.slideNodes();\n    const {\n      watchDrag,\n      loop\n    } = emblaApi.internalEngine().options;\n    const isDraggable = !!watchDrag;\n    if (options.loop && loop) {\n      classNames.loop = normalizeClassNames(options.loop);\n      addClass(root, classNames.loop);\n    }\n    if (options.draggable && isDraggable) {\n      classNames.draggable = normalizeClassNames(options.draggable);\n      addClass(root, classNames.draggable);\n    }\n    if (options.dragging) {\n      classNames.dragging = normalizeClassNames(options.dragging);\n      draggingEvents.forEach(evt => emblaApi.on(evt, toggleDraggingClass));\n    }\n    if (options.snapped) {\n      classNames.snapped = normalizeClassNames(options.snapped);\n      selectedEvents.forEach(evt => emblaApi.on(evt, toggleSnappedClasses));\n      toggleSnappedClasses();\n    }\n    if (options.inView) {\n      classNames.inView = normalizeClassNames(options.inView);\n      inViewEvents.forEach(evt => emblaApi.on(evt, toggleInViewClasses));\n      toggleInViewClasses();\n    }\n  }\n  function destroy() {\n    draggingEvents.forEach(evt => emblaApi.off(evt, toggleDraggingClass));\n    selectedEvents.forEach(evt => emblaApi.off(evt, toggleSnappedClasses));\n    inViewEvents.forEach(evt => emblaApi.off(evt, toggleInViewClasses));\n    removeClass(root, classNames.loop);\n    removeClass(root, classNames.draggable);\n    removeClass(root, classNames.dragging);\n    toggleSlideClasses([], snappedIndexes, classNames.snapped);\n    toggleSlideClasses([], inViewIndexes, classNames.inView);\n    Object.keys(classNames).forEach(classNameKey => {\n      const key = classNameKey;\n      classNames[key] = [];\n    });\n  }\n  function toggleDraggingClass(_, evt) {\n    const toggleClass = evt === 'pointerDown' ? addClass : removeClass;\n    toggleClass(root, classNames.dragging);\n  }\n  function toggleSlideClasses(addClassIndexes = [], removeClassIndexes = [], classNames) {\n    const removeClassSlides = removeClassIndexes.map(index => slides[index]);\n    const addClassSlides = addClassIndexes.map(index => slides[index]);\n    removeClassSlides.forEach(slide => removeClass(slide, classNames));\n    addClassSlides.forEach(slide => addClass(slide, classNames));\n    return addClassIndexes;\n  }\n  function toggleSnappedClasses() {\n    const {\n      slideRegistry\n    } = emblaApi.internalEngine();\n    const newSnappedIndexes = slideRegistry[emblaApi.selectedScrollSnap()];\n    snappedIndexes = toggleSlideClasses(newSnappedIndexes, snappedIndexes, classNames.snapped);\n  }\n  function toggleInViewClasses() {\n    const newInViewIndexes = emblaApi.slidesInView();\n    inViewIndexes = toggleSlideClasses(newInViewIndexes, inViewIndexes, classNames.inView);\n  }\n  const self = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  };\n  return self;\n}\nClassNames.globalOptions = undefined;\n\nexport { ClassNames as default };\n//# sourceMappingURL=embla-carousel-class-names.esm.js.map\n"],"names":["defaultOptions","normalizeClassNames","classNames","removeClass","node","addClass","ClassNames","userOptions","options","emblaApi","root","slides","snappedIndexes","inViewIndexes","selectedEvents","draggingEvents","inViewEvents","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","allOptions","watchDrag","loop","isDraggable","evt","toggleDraggingClass","toggleSnappedClasses","toggleInViewClasses","destroy","toggleSlideClasses","classNameKey","key","_","addClassIndexes","removeClassIndexes","removeClassSlides","index","addClassSlides","slide","slideRegistry","newSnappedIndexes","newInViewIndexes"],"mappings":"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","x_google_ignoreList":[0]}